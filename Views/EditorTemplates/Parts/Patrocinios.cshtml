@model Orchard.Patrocinadores.ViewModels.PatrociniosAdminEditViewModel
@{
    Style.Require("Patrocionadores_Calendar").AtHead();
    Style.Require("Patrocionadores_CalendarPrint").AtHead();
    Style.Require("Patrocionadores_LocationWidget").AtHead();

    Script.Require("Patrocionadores_Calendar").AtFoot();
    Script.Require("Patrocionadores_Location").AtFoot();
    
}
@using(Script.Foot()) {
    <script type ="text/javascript">
        //<![CDATA[

        function AddAntiForgeryToken(data) {
            data.__RequestVerificationToken = $('[name=__RequestVerificationToken]').val();
            return data;
        };

        function parseDateFromMVC(date) {
            return new Date(parseInt(date.replace(/\/Date\((\d+)\)\//gi, "$1")));
        }

        var ModelId = '@Model.Part.Id';

        var myregions = @Html.Raw(Json.Encode(Model.Regions));

        // Data - Raw - Patrocinadores
        var patrocinadores = @Html.Raw(Json.Encode(Model.Patrocinadores));

        // Data - Events (Patrocinios translated to Calendar business objects)
        var Events = {
            _list : [],

            Refresh: function(clientCallback) {
                // Async Refresh of the List (needs a callback)
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("List", "PatrociniosControler", new { area = "Patrocinadores" })',
                    data: AddAntiForgeryToken({modelId: ModelId}),
                    success: function (response) {

                        // Parse Data for the Calendar
                        Events._list.length = 0;
                        $.each(response, function(key, value) { 
                            Events._list[key] = {
                                title: value.PatrocinadorRecord.Nome,
                                start: parseDateFromMVC(value.DataInicio),
                                end: parseDateFromMVC(value.DataFim),
                                backgroundColor: LocationWidget.getRegion(value.PatrocinioWidgetTipoRecord_Id).color, 
                                textColor: '#FFFFFF !important',

                                Id: value.Id,
                                IdTipo: value.PatrocinioWidgetTipoRecord_Id,
                                imagem: value.URLImage,
                                linkExterno: value.ExternalLink,
                                patrocinador: value.PatrocinadorRecord
                            }
                        });

                        // Calls Callback
                        if(jQuery.isFunction(clientCallback)) clientCallback(Events._list);
                    },
                    error: function () {
                        alert('Events: Ajax Error');
                    }
                });
            },

            /*
            Cache : function() {
                return Events._list;
            },
            */

            CacheFilter : function(zonaIds) {
                if(!jQuery.isArray(zonaIds)) zonaIds = [zonaIds];

                var itemData = jQuery.grep(Events._list, function (item, index) {
                    return jQuery.inArray(item.IdTipo.toString(), zonaIds) >= 0;
                });

                return itemData;
            },

            CacheGet: function(id) {
                return jQuery.grep(Events._list, function (item, index) {
                    return item.Id == id;
                })[0];
            }
        }

        var Calendar = {
            _instance : null,

            // Show the injected data on the calendar (Lazy Loading)
            Draw : function(data) {
                if(Calendar._instance == null) {
                    // New Calendar
                    Calendar._instance = $('#calendar').fullCalendar({
                        selectable: true,
                        select: function (startDate, endDate, allDay, jsEvent, view) {
                            // New Event
                            Detail.New(startDate, endDate);
                        },
                        eventClick: function(calEvent, jsEvent, view) {
                            // Edit Event
                            Detail.Edit(calEvent.Id);
                        },
                        events: data
                    });
                } else {
                    // Reuse Calendar
                    var cal = $('#calendar')
                    cal.fullCalendar('removeEvents');
                    cal.fullCalendar( 'addEventSource', data );
                }
            },

            // Refreshes the Calendar pulling new data
            Refresh : function() {
                Events.Refresh(function(data) {
                    Calendar.Draw(data);
                });
            }
        }

        var Detail = {
            // Open Dialog Window
            Open : function() {
                var dlg = $("div#dialog");

                dlg.dialog({
                    open: function () {
                        jQuery('input:first').blur();
                        jQuery('#ui-datepicker-div').hide();
                    },
                });
            },

            // Close Dialog Window
            Close : function() {
                $("div#dialog").dialog('close');
            },

            // Save current values in the dialog window
            Save : function() {
                idDetail = $('input#PatrocinioId').val(); ; 
                idPatrocinador = $('select#PatrocinadorID').val();
                idTipo = $('#LocationEditWidget').find('select').val();
                startDate = $('input#DataInicio').val(); 
                endData = $('input#DataFim').val(); 
                urlImage = $('input#Imagem').val();
                linkExt = $('input#ExternalLink').val();

                var detail = {
                    "PatrociniosPartRecord_Id":ModelId,
                    "Id":idDetail,
                    "patrocinadorID":idPatrocinador,
                    "PatrocinioWidgetTipoRecord_Id":idTipo,
                    "DataInicio":startDate,
                    "DataFim":endData,
                    "URLImage":urlImage,
                    "ExternalLink":linkExt,
                };

                console.debug(detail);

                // Saves Detail
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Save", "PatrociniosControler", new { area = "Patrocinadores" })',
                    data: AddAntiForgeryToken(detail),
                    success: function (response) {
                        if(response) {
                            // Refreshes Calendar
                            Calendar.Refresh();

                            Detail.Close();
                        } else {
                            alert('BUSINESS ERROR');
                        }
                    },
                    error: function () {
                        alert('NETWORK ERROR');
                    }
                });

            },

            // Edit existing item
            Edit : function(idDetail) {
                var itemData = Events.CacheGet(idDetail);

                Detail._mapearValores(itemData.Id, itemData.IdTipo, itemData.start, itemData.end, itemData.patrocinador.Id, itemData.imagem, itemData.linkExterno);

                Detail.Open();
            },

            // Create New Item
            New : function(startDate, endDate) {
                var dlg = $("div#dialog");

                Detail._mapearValores(0, 1, startDate, endDate, 0, '', '');

                Detail.Open();
            },

            _mapearValores: function(id, idTipo, startDate, endDate, idPatrocinador, imagem, linkExterno) {
                var dlg = $("div#dialog");

                if(id > 0) {
                    dlg.find('input#PatrocinioId').val(id);
                } else {
                    dlg.find('input#PatrocinioId').val(id);
                }

                dlg.find('select.LocationWidgetSelect').val(idTipo);
                dlg.find('select.LocationWidgetSelect').change();

                dlg.find('#DataInicio').datepicker("setDate", startDate);
                dlg.find('#DataFim').datepicker("setDate", endDate);

                if(idPatrocinador > 0) {
                    dlg.find('select#PatrocinadorID').val(idPatrocinador);
                } else if(patrocinadores != null && patrocinadores.length > 0) {
                    dlg.find('select#PatrocinadorID').val(patrocinadores[0].id);
                }

                dlg.find('#Imagem').val(imagem);

                dlg.find('#ExternalLink').val(linkExterno);
            }
        }

        // Document - Init
        $(document).ready(function () { 
            // Calendar - Init
            Calendar.Refresh();

            // Calendar - Filter
            LocationWidget.getNew($('#LocationFilter'), true, function(sender, multipleSelection) {
                var values = $(sender).val();

                if(values == null || !(values.length >= 0)) {
                    values = [];
                    $.each($(sender).find('option'), function(key, value) { 
                        values[key] = $(value).val();
                    });
                }

                Calendar.Draw(Events.CacheFilter(values));
            });

            // Edit - Fields
            LocationWidget.getNew($('#LocationEditWidget'), false, function(sender, multipleSelection) {
                //var values = $(sender).val();
            });
            $("#DataInicio").datepicker({ dateFormat: 'yy-mm-dd' });
            $("#DataFim").datepicker({ dateFormat: 'yy-mm-dd' });
        });
        //]]>
    </script>
}
<h2>Patrocinadores</h2>
<fieldset>
    <div>
        <span id="LocationFilter"></span>
    </div>
    <div id='calendar'></div>
</fieldset>

<div id="dialog" title="Patrocínio" style="display:none;">
    <input type="hidden" id="PatrocinioId" name="PatrocinioId" value="0" />
    <fieldset>
        <label>Localização</label>
        <div id="LocationEditWidget"></div>
    </fieldset>
    <fieldset>
        <label>Início</label>
        <input type="text" id="DataInicio" style="width:100px;"/>
    </fieldset>
    <fieldset>
        <label>Fim</label>
        <input type="text" id="DataFim" style="width:100px;"/>
    </fieldset>
    <fieldset>
        <label>Patrocinador</label>
        @Html.DropDownList("PatrocinadorID",new SelectList(Model.Patrocinadores, "Id", "Nome"))
    </fieldset>
    <fieldset>
        <label>Imagem
            <a href="javascript:window.open($('input#Imagem').val(),'Imagem','')"><img src="@Href("~/Modules/Patrocinadores/Styles/Images/zoom.png")" width="16" height="16" style="margin: 0px 0px 0px 178px;"/></a>
        </label>
        <input type="text" id="Imagem" style="width:250px;"/>
        
    </fieldset>
    <fieldset>
        <label>Ligação Externa
             <a href="javascript:window.open($('input#ExternalLink').val(),'ExternalLink','')"><img src="@Href("~/Modules/Patrocinadores/Styles/Images/zoom.png")" width="16" height="16" style="margin: 0px 0px 0px 120px;"/></a>
        </label>
        <input type="text" id="ExternalLink" style="width:250px;"/>
    </fieldset>
    <fieldset>
        <button type="button" class="primaryAction" title="@T("Save")" onclick="Detail.Save()">@T("Save")</button>
        <button type="button" class="cancel" title="@T("Cancel")" onclick="Detail.Close()">@T("Cancel")</button>
    </fieldset>
</div>